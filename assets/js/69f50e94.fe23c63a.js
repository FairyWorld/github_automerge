"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3354],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(n),p=r,h=m["".concat(u,".").concat(p)]||m[p]||d[p]||a;return n?o.createElement(h,i(i({ref:t},s),{},{components:n})):o.createElement(h,i({ref:t},s))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9287:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],c={sidebar_position:3},u="Your first document",l={unversionedId:"tutorial/create-a-document",id:"tutorial/create-a-document",isDocsHomePage:!1,title:"Your first document",description:"An Automerge document is a JSON object. Similar to a NoSQL collection, a document allows you to track the state of your application.",source:"@site/docs/tutorial/create-a-document.md",sourceDirName:"tutorial",slug:"/tutorial/create-a-document",permalink:"/docs/tutorial/create-a-document",editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/tutorial/create-a-document.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/docs/tutorial/setup"},next:{title:"Make a change",permalink:"/docs/tutorial/make-a-change"}},s=[{value:"ActorId",id:"actorid",children:[],level:2},{value:"Modeling our data",id:"modeling-our-data",children:[],level:2}],d={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"your-first-document"},"Your first document"),(0,a.kt)("p",null,"An Automerge document is a JSON object. Similar to a NoSQL collection, a document allows you to track the state of your application.  "),(0,a.kt)("p",null,"To create a new document, we want to start with "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let doc = Automerge.init()\n")),(0,a.kt)("p",null,"This document is a simple JavaScript object, which can be accessed like any other object. "),(0,a.kt)("p",null,"However, you can't just set properties on an Automerge document. With a typical JavaScript object, you might do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"> let obj = {}\n> obj.count = 0\n> obj.count++\n> obj\n{ count: 1 }\n")),(0,a.kt)("p",null,"In contrast, Automerge documents are immutable and follow a ",(0,a.kt)("strong",{parentName:"p"},"functional")," pattern. This means that you can retrieve properties from a document, but you can't change them like you would in a typical JavaScript object. Instead, you need to use ",(0,a.kt)("inlineCode",{parentName:"p"},"Automerge.change()"),", which we discuss in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/tutorial/make-a-change/"},"next section"),"."),(0,a.kt)("p",null,"Let's store the current document in a global variable ",(0,a.kt)("inlineCode",{parentName:"p"},"doc"),", which is initialized as shown above. We also define a function that we call whenever the document changes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function updateDoc(newDoc) {\n  doc = newDoc\n}\n")),(0,a.kt)("p",null,"For now, the function only updates the global variable ",(0,a.kt)("inlineCode",{parentName:"p"},"doc"),", but later we will add more code to this function."),(0,a.kt)("h2",{id:"actorid"},"ActorId"),(0,a.kt)("p",null,"Each instance of a document has an actorId. This is useful for Automerge to know which process or device is making changes. It's important that every processes has a unique actorId. Every time you make an Automerge document, it automatically generates an actorId for you."),(0,a.kt)("p",null,"To try this out, print it to the console using ",(0,a.kt)("inlineCode",{parentName:"p"},"Automerge.getActorId(doc)"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let doc = Automerge.init()\nlet actorId = Automerge.getActorId(doc)\nconsole.log(actorId)\n")),(0,a.kt)("p",null,"Notice that every time you refresh the page, the actorId is a different randomly generated string. "),(0,a.kt)("h2",{id:"modeling-our-data"},"Modeling our data"),(0,a.kt)("p",null,"We want to build a todo list, which will have the following requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A list of todo items "),(0,a.kt)("li",{parentName:"ul"},"Each item has: a text box, boolean checkmark"),(0,a.kt)("li",{parentName:"ul"},"An input box to add another item ")),(0,a.kt)("p",null,"To store the state of the todo list, we can use a JSON structure like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "items": [\n    {\n      "text": "water the plants",\n      "done": false\n    },\n    {\n      "text": "feed the cat",\n      "done": true\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"When the document is first created, it has no schema. Automerge documents, unlike SQL databases, do not have a fixed schema that you set at the beginning. Instead, we set up the document structure by making changes to the Automerge document over time. See the next section to make your first change."))}m.isMDXComponent=!0}}]);